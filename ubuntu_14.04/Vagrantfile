# -*- mode: ruby -*-
# vi: set ft=ruby :

# edited from vagrant init hashicorp/precise64 - MIT license

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "v0rtex/xenial64-iso"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
    vb.name = "gpg4libre Ubuntu 16.04"

    # Customize the amount of memory on the VM:
    vb.memory = "1024"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  #

  # upload two sample keys
  config.vm.provision "file", source: "../keys/key1.gpg", destination: "key1.gpg"
  config.vm.provision "file", source: "../keys/key2.gpg", destination: "key2.gpg"

  # installs xfce, kleopatra, fixes an apt-get bug, and sets keyboard
  # and locale to DE
  config.vm.provision :shell, inline: "apt-get update"
  config.vm.provision :shell, inline: "apt-get install -y language-pack-de"
  config.vm.provision :shell, inline: "update-locale LANG=de_DE.UTF-8"
  config.vm.provision :shell, inline: "apt-get install -y xfce4 kgpg kleopatra lightdm || true"
  config.vm.provision :shell, inline: "dpkg-reconfigure lightdm"
  config.vm.provision :shell, inline: "apt-get install -y lightdm-gtk-greeter"
  config.vm.provision :shell, inline: "sed -ie '/^XKBLAYOUT=/s/\".*\"/\"de\"/' /etc/default/keyboard"
  config.vm.provision :shell, inline: "/usr/share/debconf/fix_db.pl && apt-get install -y"

  # pulls latest master from Jenkins, imports two sample keys
  config.vm.provision :shell, privileged: false, inline: <<-SHELL
    echo 'Downloading latest libreoffice'
    wget -q http://librebuildix.cib.de:8080/job/LibreOffice%20master%20Linux%2064bit/label=linux-builder/lastSuccessfulBuild/artifact/LibreOffice_6.0.0.0.alpha0_Linux_x86-64_deb.tar.gz || (echo "Cannot download LibreOffice" && exit 1)
    tar -xf LibreOffice_6.0.0.0.alpha0_Linux_x86-64_deb.tar.gz
    sudo bash -c 'cd LibreOffice_6.0.0.0.alpha0_Linux_x86-64_deb/DEBS && dpkg -i *.deb'
  SHELL
  config.vm.provision :shell, privileged: false, inline: <<-SHELL
    echo 'Installing latest libreoffice langpacks'
    wget -q http://librebuildix.cib.de:8080/job/LibreOffice%20master%20Linux%2064bit/label=linux-builder/lastSuccessfulBuild/artifact/LibreOffice_6.0.0.0.alpha0_Linux_x86-64_deb_langpack_de.tar.gz || (echo "Cannot download LibreOffice language pack" && exit 1)
    tar -xf LibreOffice_6.0.0.0.alpha0_Linux_x86-64_deb_langpack_de.tar.gz
    sudo bash -c 'cd LibreOffice_6.0.0.0.alpha0_Linux_x86-64_deb_langpack_de/DEBS/ && dpkg -i *.deb'
  SHELL
  config.vm.provision :shell, privileged: false, inline: <<-SHELL
    rm -rf LibreOffice*
    gpg --import ~/key1.gpg && gpg --import ~/key2.gpg
  SHELL

end
